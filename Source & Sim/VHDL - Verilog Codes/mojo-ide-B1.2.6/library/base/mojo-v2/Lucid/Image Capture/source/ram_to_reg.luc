/******************************************************************************
   
   The MIT License (MIT)
   
   Copyright (c) 2015 Embedded Micro
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   
   *****************************************************************************
   
   This is an adapter from the register interface to the memory interface. It 
   allows register commands to read from the SDRAM. Writes are masked so that
   they can be used by other parts of the design and the PC can't corrupt
   the contents of the SDRAM.
*/

module ram_to_reg (
    // register interface
    input<Register.master> regIn,
    output<Register.slave> regOut,
    
    // memory interface
    output<Memory.master> memOut,
    input<Memory.slave> memIn
  ) {

  always {
    memOut.write = regIn.write;                  // connect write flags
    memOut.data = regIn.data;                    // connect data for writes
    memOut.addr = regIn.address[22:0];           // memory only uses 23 bit addresses
    memOut.valid = regIn.new_cmd & ~regIn.write; // valid only for new read commands
    regOut.data = memIn.data;                    // connect data from reads
    regOut.drdy = memIn.valid;                   // connect read valid flag
  }
}

/******************************************************************************
   
   The MIT License (MIT)
   
   Copyright (c) 2015 Embedded Micro
   
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   
   *****************************************************************************
   
   This is an asynchronous fifo. That means it has two independently clocked
   interfaces that allow you to write data from one clock domain and read
   it from another.
   
   This is a first-word-fall-through fifo meaning that dout is valid whenever
   empty is 0. If you want to perform a read, simply check if empty is 0 and
   if it is read the value of dout and set rget high to advance to the next
   value.
*/

module async_fifo #(
    SIZE = 4 : SIZE > 0,                       // Size of the data
    DEPTH = 8 : DEPTH == $pow(2,$clog2(DEPTH)) // DEPTH must be a power of 2
  )(
    input wclk,                                // write clock
    input wrst,                                // write reset
    input din [SIZE],                          // write data
    input wput,                                // write flag (1 = write)
    output full,                               // full flag (1 = full)
    
    input rclk,                                // read clock
    input rrst,                                // read reset
    output dout [SIZE],                        // read data
    input rget,                                // data read flag (1 = get next entry)
    output empty                               // empty flag (1 = empty)
  ) {
  
  const ADDR_SIZE = $clog2(DEPTH);             // size of RAM address
  
  // write clock domain
  .clk(wclk), .rst(wrst) {
    dff waddr[ADDR_SIZE];                      // write address
    dff wsync[2][ADDR_SIZE];                   // write sync dffs
  }
  
  // read clock domain
  .clk(rclk), .rst(rrst) {
    dff raddr[ADDR_SIZE];                      // read address
    dff rsync[2][ADDR_SIZE];                   // read sync dffs
  }
  
  // dual port RAM
  simple_dual_ram ram (#SIZE(SIZE), #DEPTH(DEPTH));
  
  sig waddr_gray[ADDR_SIZE];                   // gray-encoded version of waddr
  sig wnext_gray[ADDR_SIZE];                   // gray-encoded version of waddr + 1
  sig raddr_gray[ADDR_SIZE];                   // gray-encoded version of raddr
  sig wrdy, rrdy;                              // write and read ready flags
  
  always {
    // connect the clocks
    ram.wclk = wclk;
    ram.rclk = rclk;
    
    ram.write_en = 0;                          // default to not writing
    
    // convert the various values to their gray-encoded versions
    waddr_gray = (waddr.q >> 1) ^ waddr.q;
    wnext_gray = ((waddr.q+1) >> 1) ^ (waddr.q+1);
    raddr_gray = (raddr.q >> 1) ^ raddr.q;
    
    // cross clock domains with synchronizers
    rsync.d = {rsync.q[0], waddr_gray};
    wsync.d = {wsync.q[0], raddr_gray};
    
    // if next write address isn't the read address we can write
    wrdy = wnext_gray != wsync.q[1];
    
    // if the current read address isn't the write address we can read
    rrdy = raddr_gray != rsync.q[1];
    
    // invert ready signals for full and empty
    full = !wrdy;
    empty = !rrdy;
    
    // connect RAM ports
    ram.waddr = waddr.q;
    ram.raddr = raddr.q;
    ram.write_data = din;
    
    // if we have space and should write
    if (wput && wrdy) {
      waddr.d = waddr.q + 1;                   // increment write address
      ram.write_en = 1;                        // set write flag
    }
    
    // if we have data and a read request
    if (rget && rrdy) {
      raddr.d = raddr.q + 1;                   // increment read address
      ram.raddr = raddr.q + 1;                 // set to next address to keep up with reads
    }
    
    dout = ram.read_data;                      // output is directly from RAM
  }
}